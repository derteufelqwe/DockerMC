name: DockerMC CI Pipeline

#  - name: "Debug"
#    uses: lhotari/action-upterm@v1

on:
#  pull_request:
  push:
    branches: [ "master" ]
  workflow_dispatch:


jobs:
  Setup:
    runs-on: ubuntu-20.04
    steps:
      # Prepare the environment
      - name: "Clone Code"
        uses: actions/checkout@v2
      - name: "Setup JDK 8"
        uses: actions/setup-java@v1
        with:
          java-version: 8

      ### General cache setup ###

      - name: "Load cached dependencies"
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ hashFiles('**/Commons/pom.xml') }}-${{ hashFiles('**pom.xml') }}

      - name: "Install ServerManager"
        if: steps.cache-deps.output.cache-hit != 'true'
        run: mvn install -N --quiet
      - name: "Install Commons"
        if: steps.cache-deps.output.cache-hit != 'true'
        run: mvn install -f Commons/pom.xml --quiet

      - name: "Get project version"
        if: steps.cache-deps.output.cache-hit != 'true'
        run: |
          mkdir -p ~/.m2
          version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "$version" > ~/.m2/dmcversion.info

      - name: "Load project version"
        run: |
          version="$(cat ~/.m2/dmcversion.info)"
          echo "Version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV


  DockerPlugin:
    runs-on: ubuntu-20.04
    needs: [Setup]
    steps:
       # Prepare the environment
      - name: "Clone Code"
        uses: actions/checkout@v2
      - name: "Setup JDK 8"
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: "Load cached dependencies"
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ hashFiles('**/Commons/pom.xml') }}-${{ hashFiles('**pom.xml') }}

      - name: "Setup docker Buildx"
        uses: docker/setup-buildx-action@v1
      - name: "Login to DockerHub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Compile and push docker plugin
      - name: "Package docker plugin"
        run: mvn package -f DockerPlugin/pom.xml --quiet
      - name: "Build and push docker plugin"
        run: cd DockerPlugin && sh buildImage.sh
  NodeWatcher:
    runs-on: ubuntu-20.04
    needs: [ Setup ]
    steps:
      # Prepare the environment
      - name: "Clone Code"
        uses: actions/checkout@v2
      - name: "Setup JDK 8"
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: "Load cached dependencies"
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ hashFiles('**/Commons/pom.xml') }}-${{ hashFiles('**pom.xml') }}
      - name: "Load project version"
        run: |
          version="$(cat ~/.m2/dmcversion.info)"
          echo "Version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: "Setup docker Buildx"
        uses: docker/setup-buildx-action@v1
      - name: "Login to DockerHub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Compile and push NodeWatcher image
      - name: "Package NodeWatcher"
        run: mvn package -f NodeWatcher/pom.xml --quiet
      - name: "Build and push NodeWatcher image"
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: NodeWatcher
          tags: |
            derteufelqwe/dockermc-nodewatcher:${{ env.VERSION }}
            derteufelqwe/dockermc-nodewatcher:latest

  MinecraftPlugin:
    runs-on: ubuntu-20.04
    needs: [ Setup ]
    steps:
      # Prepare the environment
      - name: "Clone Code"
        uses: actions/checkout@v2
      - name: "Setup JDK 8"
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: "Load cached dependencies"
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ hashFiles('**/Commons/pom.xml') }}-${{ hashFiles('**pom.xml') }}
      - name: "Load project version"
        run: |
          version="$(cat ~/.m2/dmcversion.info)"
          echo "Version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: "Package Minecraft plugin"
        run: mvn package -f MinecraftPlugin/pom.xml --quiet

      - name: "Archive MinecraftPlugin Jar"
        uses: actions/upload-artifact@v2
        with:
          name: MinecraftPlugin
          path: MinecraftPlugin/target/MinecraftPlugin-${{ env.VERSION }}.jar

  BungeeCordPlugin:
    runs-on: ubuntu-20.04
    needs: [ Setup ]
    steps:
      # Prepare the environment
      - name: "Clone Code"
        uses: actions/checkout@v2
      - name: "Setup JDK 8"
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: "Load cached dependencies"
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ hashFiles('**/Commons/pom.xml') }}-${{ hashFiles('**pom.xml') }}
      - name: "Load project version"
        run: |
          version="$(cat ~/.m2/dmcversion.info)"
          echo "Version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: "Package BungeeCord plugin"
        run: mvn package -f BungeePlugin/pom.xml --quiet

      - name: "Archive BungeePlugin Jar"
        uses: actions/upload-artifact@v2
        with:
          name: BungeePlugin
          path: BungeePlugin/target/BungeePlugin-${{ env.VERSION }}.jar

  Release:
    runs-on: ubuntu-20.04
    needs: [ MinecraftPlugin, BungeeCordPlugin ]
    steps:
      # Prepare the environment
      - name: "Load project version"
        run: |
          version="$(cat ~/.m2/dmcversion.info)"
          echo "Version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: "Package BungeeCord plugin"
        run: mvn package -f BungeePlugin/pom.xml --quiet

      # Download previously generated artifacts
      - uses: actions/download-artifact@v2
        with:
          name: MinecraftPlugin
          path: .
      - uses: actions/download-artifact@v2
        with:
          name: BungeePlugin
          path: .

      - name: "Debug"
        uses: lhotari/action-upterm@v1

#      # Create the releases
#      - name: "Create release (latest)"
#        uses: "marvinpinto/action-automatic-releases@latest"
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          automatic_release_tag: latest
#          prerelease: false
#          files: |
#            MinecraftPlugin/target/MinecraftPlugin-${{ env.VERSION }}.jar
#            BungeePlugin/target/BungeePlugin-${{ env.VERSION }}.jar
#
#      - name: "Create release (version)"
#        uses: marvinpinto/action-automatic-releases@latest
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          automatic_release_tag: ${{ env.VERSION }}
#          prerelease: false
#          files: |
#            MinecraftPlugin/target/MinecraftPlugin-${{ env.VERSION }}.jar
#            BungeePlugin/target/BungeePlugin-${{ env.VERSION }}.jar


