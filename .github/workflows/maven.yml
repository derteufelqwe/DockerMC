name: DockerMC CI Pipeline

#  - name: "Debug"
#    uses: lhotari/action-upterm@v1

on:
#  pull_request:
  push:
    branches: [ "master" ]
  workflow_dispatch:


jobs:
  CI-CD-Pipeline:
    runs-on: ubuntu-20.04
    steps:
      # Prepare the environment
      - name: "Clone Code"
        uses: actions/checkout@v2
      - name: "Setup JDK 8"
        uses: actions/setup-java@v1
        with:
          java-version: 8
#      - name: "Setup docker Buildx"
#        uses: docker/setup-buildx-action@v1
#      - name: "Login to DockerHub"
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Get project version"
        run: |
          version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "VERSION=$version" >> $GITHUB_ENV

      # Cache dependencies
      - name: "Load cached dependencies"
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
          key: ${{ hashFiles('**/Commons/pom.xml') }}

      # Compile and install essentials
      - name: "Install ServerManager"
        if: steps.cache-deps.output.cache-hit != 'true'
        run: mvn install -N --quiet
      - name: "Install Commons"
        if: steps.cache-deps.output.cache-hit != 'true'
        run: mvn install -f Commons/pom.xml --quiet

      - name: "Cache dependencies"
        uses: actions/cache@v2
        if: steps.cache-deps.output.cache-hit != 'true'
        with:
          path: |
            ~/.m2/repository
          key: ${{ hashFiles('**/Commons/pom.xml') }}

#      # Compile and push docker log driver plugin
#      - name: "Package LogDriver"
#        run: mvn package -f DockerLogDriver/pom.xml --quiet
#      - name: "Build and push driver image"
#        run: cd DockerLogDriver && sh buildImage.sh
#
#      # Compile and push NodeWatcher image
#      - name: "Package NodeWatcher"
#        run: mvn package -f NodeWatcher/pom.xml --quiet
#      - name: "Build and push NodeWatcher image"
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          context: NodeWatcher
#          tags: |
#            derteufelqwe/dockermc-nodewatcher:${{ env.VERSION }}
#            derteufelqwe/dockermc-nodewatcher:latest
#
#      # Build release binaries
#      - name: "Package Minecraft plugin"
#        run: mvn package -f MinecraftPlugin/pom.xml --quiet
#      - name: "Package BungeeCord plugin"
#        run: mvn package -f BungeePlugin/pom.xml --quiet
#
#
#      # Create the releases
#      - name: "Create release (latest)"
#        uses: "marvinpinto/action-automatic-releases@latest"
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          automatic_release_tag: latest
#          prerelease: false
#          files: |
#            MinecraftPlugin/target/MinecraftPlugin-${{ env.VERSION }}.jar
#            BungeePlugin/target/BungeePlugin-${{ env.VERSION }}.jar
#
#      - name: "Create release (version)"
#        uses: marvinpinto/action-automatic-releases@latest
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          automatic_release_tag: ${{ env.VERSION }}
#          prerelease: false
#          files: |
#            MinecraftPlugin/target/MinecraftPlugin-${{ env.VERSION }}.jar
#            BungeePlugin/target/BungeePlugin-${{ env.VERSION }}.jar
